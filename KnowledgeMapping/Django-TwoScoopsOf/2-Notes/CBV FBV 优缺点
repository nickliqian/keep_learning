FBV的简单性是以代码重用为代价的：FBV没有像CBV那样从超类继承的能力。 它们在本质上具有更明显的功能优势，这有助于一些有趣的策略。

在编写FBV时我们遵循这些准则：
查看代码越少越好。
不要在视图中重复代码。
视图应该处理表示逻辑。 尽可能将业务逻辑保留在模型中，如果必要的话，也可以用表单来保存。
保持你的观点简单。
使用它们来编写自定义的403,404和500错误处理程序。
复杂的嵌套块如果要避免。



functools wrap

from functools import wraps
from . import utils
# based off the decorator template from Example 8.5
def check_sprinkles(view_func):
"""Check if a user can add sprinkles"""
	@wraps(view_func)

	def new_view_func(request, *args, **kwargs):
		# Act on the request object with utils.can_sprinkle()
		request = utils.can_sprinkle(request)
		# Call the view function
		response = view_func(request, *args, **kwargs)
		# Return the HttpResponse object
		return response
	return new_view_func


基于函数的视图在Django世界中依然存在。 如果我们记得每个函数都接受一个HttpRequest对象并返回一个HttpResponse对象，那么我们可以使用它来获得我们的优势。 我们可以利用通用的HttpRequest和HttpResponse修改函数，也可以用来构造修饰器函数。


查看代码越少越好。
不要在视图中重复代码。
视图应该处理presentation logic。尽可能将业务逻辑保留在模型中，如果必要的话，也可以用表单来保存。
保持你的视图简单。
不要使用CBV编写自定义的403,404和500错误处理程序。 改用FBV。
保持你的mixin更简单。


在编程中，一个mixin是一个提供被继承的功能的类，但并不意味着它自己实例化。 在具有多重继承的编程语言中，可以使用mixin为类添加增强的功能和行为。
我们可以使用mixins的强大功能为我们的Django应用程序构建自己的视图类。
当使用mixin组成我们自己的视图类时，我们推荐由Kenneth Love提供的这些继承规则。 规则遵循Python的方法解析顺序，在最简单的定义中，顺序从左到右依次为：

1 Django提供的基本视图类总是在右边。
2 Mixins进入基本视图的左侧。
3 Mixins应该继承自Python的内置对象类型 object。

