基于函数 FBVs
基于类   CBVs

这个流程图遵循我们优先考虑使用CBV而不是FBV。
我们更喜欢使用CBV来获取大多数视图，使用FBV只实现自定义错误视图或者复杂的视图，这对CBV来说是一个痛苦的执行。

from django.views.generic import ListView, DetailView, UpdateView

class TasteUpdateView(UpdateView):
    model = Tasting
    def get_success_url(self):
        return reverse("tastings:detail",
        kwargs={"pk": self.object.pk})

url(
    regex=r" ˆ (?P<pk>\d+)/ $ ",
    view=views.TasteDetailView.as_view(),
    name="detail"
    ),


<a href="{% url "tastings:detail" taste.pk %}">{{ taste.title }}</a>

搜索“tastings:detail”使得明显的搜索结果响应。 这可以并且使得应用程序和项目的升级和重构更容易，包括与新的第三方库进行交互时。


# Django FBV as a function
HttpResponse = view(HttpRequest)
# Deciphered into basic math (remember functions from algebra?)
y = f(x)
# ... and then translated into a CBV example
HttpResponse = View.as_view()(HttpRequest)