TemplateView
通用视图类
class FruityFlavorView(FreshFruitMixin, TemplateView):
	template_name = "fruity_flavor.html"
	def get_context_data(self, **kwargs):
		context = super(FreshFruitMixin,
		self).get_context_data(**kwargs)
		context["has_fresh_fruit"] = True
		return context
--------------------------------------
DetailView

from django.views.generic.detail import DetailView
from django.utils import timezone

from articles.models import Article

class ArticleDetailView(DetailView):

    model = Article

    def get_context_data(self, **kwargs):
        context = super(ArticleDetailView, self).get_context_data(**kwargs)
        context['now'] = timezone.now()
        return context

代码讲解：
继承父类方法后，指定model=xxx，return context
此时模板中会接收一个object字典，包含model中指定实例的所有字段，实例由url中的slug指定
并可新增字段例如 context['now']=xxx

<h1>{{ object.headline }}</h1>
<p>{{ object.content }}</p>
<p>Reporter: {{ object.reporter }}</p>
<p>Published: {{ object.pub_date|date }}</p>
<p>Date: {{ now|date }}</p>

但注意，需要在url中定义例如 url，会将slug的值传到模型中去查询
from django.conf.urls import url
from article.views import ArticleDetailView

urlpatterns = [
    url(r'^(?P<slug>[-\w]+)/$', ArticleDetailView.as_view(), name='article-detail'),
]
如果是一个无效的id，会报404

-----------------------------------------------------------------------------
ListView

from django.views.generic.list import ListView
from django.utils import timezone

from articles.models import Article

class ArticleListView(ListView):

    model = Article

    def get_context_data(self, **kwargs):
        context = super(ArticleListView, self).get_context_data(**kwargs)
        context['now'] = timezone.now()
        return context

指定model，返回上下文，模板会接收到一个 object_list
可以在模板中进行遍历

<h1>Articles</h1>
<ul>
{% for article in object_list %}
    <li>{{ article.pub_date|date }} - {{ article.headline }}</li>
{% empty %}
    <li>No articles yet.</li>
{% endfor %}
</ul>

url如下
from django.conf.urls import url

from article.views import ArticleListView

urlpatterns = [
    url(r'^$', ArticleListView.as_view(), name='article-list'),
]




------------------------------------------------------------------
class django.views.generic.list.BaseListView

get(request, *args, **kwargs)¶
添加object_list 到Context 中。如果allow_empty 为True，则显示一个空的列表。如果allow_empty 为False，则引发一个404 错误。

这里可以自己定制当列表中没有任何对象的时候，返回空列表True或者404错误False
默认情况下，是True，显示空页面


