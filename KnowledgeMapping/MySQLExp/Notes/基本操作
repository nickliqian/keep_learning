create database <db_name> charset=<char:utf8>; # 创建数据库

alter database <db_name> charset <char:utf8>; # 修改数据库编码

show databases;
use <db_name>;
show tables;


select host, user from user where user='root'; # 查看 root ⽤户的 host，默认只能被本机IP(127.0.0.1)登录


# % 表示任意IP，语句表示更新root⽤户信息，让root⽤户可以被任意主机IP登录
update mysql.user set host = '%' where user = 'root';


flush privileges; # 使用修改

python@ubuntu:~$ mysql -uroot -pmysql -h 192.168.xx.xxx # 远程登陆mysql


E-R模型
E表示Entry（实体），设计实体就像定义⼀个类⼀样，指定从哪些⽅⾯
描述对象，⼀个实体转换为数据库中的⼀个表
R表示Relationship（关系），关系描述两个实体之间的对应规则，包括
⼀对⼀、⼀对多、多对多，关系也是⼀种数据，需要以⼀个字段的形式
存储在表中，根据对应⽅式的不同，存储也有不同的⽅案
A对B为1对1：在表A或表B中创建⼀个字段，存储另⼀个表的主键值
A对B为1对多：在表B中创建⼀个字段，存储表A的主键值
A对B为多对多：新建⼀张表C，这个表只有两个字段，⼀个⽤于存
储A的主键值，⼀个⽤于存储B的主键值


三范式
经过研究和对使⽤中问题的总结，对于设计数据库提出了⼀些规范，这
些规范被称为范式
数据库设计中⼀共有6个范式，⼀般需要遵守3范式即可
第⼀范式（1NF)：数据库表的每⼀列都是不可分割的原⼦数据项，即列
不可拆分。
第⼆范式（2NF)：建⽴在第⼀范式的基础上，要求数据库表中的每个实
例或记录必须可以被唯⼀地区分，即唯⼀标识(主键)。
第三范式（3NF)：建⽴在第⼆范式的基础上，任何⾮主属性不依赖于其
数据库设计模型与范式
它⾮主属性，即引⽤主键。


约束条件说明
NOT NULL            标识该属性不能为空
UNIQUE              标识该属性的值是唯⼀的
AUTO_INCREMENT      标识该属性的值自动增加
DEFAULT             为该属性设置默认值，当不填写此值时会使用默认值，如果填写则以填写为准
PRIMARY KEY         标识该属性为该表的主键，能确定⼀条记录的唯⼀标识（满⾜第⼆范式）
FOREIGN KEY         标识该属性为该表的外键，与某表的主键关联。如果⼀个表中的某⼀列是另外⼀个表的中的主键，那么设置这列为外键。


查看版本：select version();
显示当前时间：select now();


是否有必要使用外键：
互联网行业应用用户量大，并发高，数据库服务器很容易成为性能瓶颈，尤其受IO能力限制，且不能轻易地水平扩展。

如果设置了外键，当做⼀些涉及外键字段的增，删，更新操作之后，需要触发相关操作去检查，会额外消耗计算机资源。

说明：虽然外键约束可以保证数据的有效性，但是在进行数据的 crud「增加(Create)、读取查询(Retrieve)、更新(Update)和删除(Delete)」时，
都会降低数据库的性能，所以不推荐使用，那么数据的有效性怎么保证呢？答：可以在逻辑层进行控制。

sql语句主要分为：
DQL：数据查询语言，⽤于对数据进⾏查询，如select
DML：数据操作语言，对数据进⾏增加、修改、删除，如insert、udpate、delete
TPL：事务处理语言，对事务进⾏处理，包括begin transaction、commit、rollback
DCL：数据控制语言，进⾏授权与权限回收，如grant、revoke
DDL：数据定义语言，进⾏数据库、表的管理等，如create、drop
CCL：指针控制语言，通过控制指针完成表的操作，如declare、cursor

对于Web程序员来讲，重点是数据的 CRUD「增加(Create)、读取查询
(Retrieve)、更新(Update)和删除(Delete)」，必须熟练编写DQL、
DML，能够编写DDL完成数据库、表的操作，其它语⾔如TPL、DCL、
CCL了解即可。


show databases;
select database();
show create database test;
show create table test;
desc 表名;
show full columns from 表名; # 查看字段编码/权限/
select version();
select now();
create database 数据库名 charset=utf8;
create database python charset=utf8;
alter database python charset utf8;
alter table students convert to charset utf8; # 修改表的字符集，以及所有字符列(char, varchar, text等)的字符集为utf8
drop database 数据库名;
drop database python;

# 拿tinyint字段来举例，unsigned后，字段的取值范围是0-255，而signed的范围是-128 - 127。
create table classes(
    id int unsigned auto_increment primary key not null,
    name varchar(10),
    isdelete bit default 0
);

# 外键 foreign key(clsid) references classes(id)
create table students(
    id int unsigned auto_increment primary key not null,
    name varchar(10) not null,
    gender bit default 1,
    hometown varchar(20),
    clsid int unsigned,
    isdelete bit default 0,
    foreign key(clsid) references classes(id)
);

alter table students add birthday datetime;
alter table students add newkey int default 10 not null comment '新编号';

alter table students change name name1 varchar(20) not null;  # 重命名
alter table 表名 modify 列名 类型及约束;
alter table students modify name1 varchar(10) not null comment '测试';  # 不重命名


alter table table add/change/modify/drop ...

alter table 表名 drop 列名;
alter table students drop birthday;
drop table 表名;
drop table students;

select * from 表名;
select * from students;
select 列1,列2,... from 表名;
select id,name from classes;


说明：主键列是⾃动增⻓，但是在全列插⼊时需要占位，通常使⽤0，插⼊成功后以实际数据为准
全列插⼊：值的顺序与表中字段的顺序对应
insert into 表名 values(...)
insert into students values(0,'郭靖',1,'蒙古','2015-1-2');


部分列插⼊：值的顺序与给出的列顺序对应
insert into 表名(列1,...) values(值1,...)
insert into students(name,hometown,birthday) values('⻩蓉','桃花岛','2015-3-2');



上⾯的语句⼀次可以向表中插⼊⼀⾏数据，还可以⼀次性插⼊多⾏数据，这样可以减少与数据库的通信
全列多⾏插⼊：值的顺序与给出的列顺序对应
insert into 表名 values(...),(...)...;
insert into classes values(0,'python'),(0,'linux'),(0,'mysql'),(0,'js');


insert into 表名(列1,...) values(值1,...),(值1,...)...;
insert into students(name) values('杨康'),('杨过'),('⼩⻰⼥');


如果插入或者更新的value为字符串需要加上引号。
update 表名 set 列1=值1,列2=值2... where 条件
update students set gender=0,hometown='古墓' where id=5;

delete from 表名 where 条件
delete from students where id=5;
逻辑删除，本质就是修改操作
update students set isdelete=1 where id=1;


备份
python@ubuntu:~$ mysqldump –uroot –pmysql 数据库名 > ~/Desktop/py.sql;
恢复
python@ubuntu:~$ mysql -uroot –pmysql 数据库名 < ~/Desktop/py.sql


insert into t1(name) select ascii('a');
select ascii('a');  # 查看字符ascii码
select char(97);  # 查看ascii码对应的字符
select concat(12,34,'ab');  # 拼接字符串
select length('abc');  # 查看字符串长度
select substring('abc123',2,3);  # 截取字符串
select ltrim(str);  # 返回删除了左空格的字符串str
select rtrim(str);  # 返回删除了右空格的字符串str
select trim([方向 remstr from str);
返回从某侧删除remstr后的字符串str
方向词:both、leading、trailing，表示两侧、左、右
select space(10);  # 返回指定个数的空格
select replace('abc123','123','def');  # 替换字符串
lower(str)
upper(str)
select lower('aBcD');  # 转小写


select abs(-32);  # 求绝对值abs(n)
select mod(10,3);  # 求m除以n的余数mod(m,n)，同运算符%
select 10%3;
select floor(2.3);  # 地板floor(n)，表示不⼤于n的最⼤整数
select ceiling(2.3);  # 天花板ceiling(n)，表示不⼩于n的最⼤整数






日期时间函数
获取子值,语法如下
year(date)返回date的年份(范围在1000到9999)
month(date)返回date中的月份数值
day(date)返回date中的日期数值
hour(time)返回time的小时数(范围是0到23)
minute(time)返回time的分钟数(范围是0到59)
second(time)返回time的秒数(范围是0到59)
select year('2016-12-21');

日期计算,使用+-运算符,数字后面的关键字为year、month、day、hour、minute、second
select '2016-12-21'+interval 1 day;

日期格式化date_format(date,format),format参数可用的值如下
* 获取年%Y,返回4位的整数
* 获取年%y,返回2位的整数
* 获取月%m,值为1-12的整数
* 获取日%d,返回1-31整数
* 获取时%H,值为0-23的整数
* 获取时%h,值为1-12的整数
* 获取分%i,值为0-59的整数
* 获取秒%s,值为0-59的整数
select date_format('2016-12-21','%Y %m %d');

当前日期current_date()
select current_date();
当前时间current_time()
select current_time();
当前日期时间now()
select now();


类型转换函数
有cast和convert两个函数
语法如下:
cast(value as type)
convert(value, type)
value表示要转换的值, type表示目标类型
目标类型如下: 二进制binary, 字符型char,可指定字符个数如char(10), 日期date, 时间time,
            日期时间型datetime, 浮点数decimal, 整数signed, 无符号整数unsigned
例
SELECT CONVERT('125.83',SIGNED);
SELECT CAST('125.83' AS signed); -> 125
SELECT CAST(125.83 AS signed); -> 126 四舍五入


判断
mysql> select case 1
    -> when 1 then 'one'
    -> when 2 then 'two'
    -> else 'zero' end result;

mysql> select case
    -> when 1>2 then 'part1'
    -> when 3>2 then 'part2'
    -> else 'part3' end as result;

if(表达式,结果1,结果2)
select if(1>2,2,3) as result;


ifnull语句
说明:如果表达式1不为null,则返回表达式1的结果,否则返回表达式2的结果
ifnull(表达式1,表达式2)
select ifnull(1,0) as result;

nullif语句
说明:如果表达式1等于表达式2,则返回null,否则返回表达式1的结果
nullif(表达式1,表达式2)
select nullif(1,0) as result;


select * from 表名;
select * from students;

查询指定字段
在select后面的列名部分,可以使用as为列起别名,这个别名出现在结果集中
select 列1,列2,... from 表名;
select id,name,gender from students;

消除重复行
在select后面列前使用distinct可以消除重复的行
select distinct 列1,... from 表名;
select distinct gender from students;

# 查看不重复的数量
select count(distinct name) from t1;


select * from 表名 where 条件;
select * from students where id=1;
比较运算符
等于=
大于>
大于等于>=
小于<
小于等于<=
不等于!=或<>

逻辑运算符
and
or
not

模糊查询
like
%表示任意多个任意字符
_表示一个任意字符
select * from t1 where name like '%y%';
select * from t1 where name like '%y___';


范围查询
in表示在一个非连续的范围内
select * from t1 where id in (1,2,3);
select * from t1 where id between 3 and 8 and name like '%y%';

空值查询
注意:null与''是不同的
判空is null
select * from t1 where more is null;
select * from t1 where more is not null;

优先级
优先级由高到低的顺序为:小括号,not,比较运算符,逻辑运算符
and比or先运算,如果同时出现并希望先算or,需要结合()使用
